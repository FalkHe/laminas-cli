#!/usr/bin/env php
<?php

/**
 * @see       https://github.com/laminas/laminas-cli for the canonical source repository
 * @copyright https://github.com/laminas/laminas-cli/blob/master/COPYRIGHT.md
 * @license   https://github.com/laminas/laminas-cli/blob/master/LICENSE.md New BSD License
 */

declare(strict_types=1);

use Laminas\Cli\ApplicationProvisioner;
use Laminas\Cli\ApplicationFactory;
use Laminas\Cli\ContainerResolver;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

if (file_exists($a = __DIR__ . '/../../../autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../vendor/autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../autoload.php')) {
    require $a;
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}

$projectRoot = dirname($a) . '/../';

// Set the main application directory as the current working directory
chdir($projectRoot);

$app = (new ApplicationFactory())();
$definition = $app->getDefinition();
$output = new ConsoleOutput();
$containerNotFoundMessage = '';
try {
    $input = new ArgvInput();
    $input->bind($definition);
    $container = (new ContainerResolver($projectRoot))->resolve($input);
    $app = (new ApplicationProvisioner())($app, $container);
} catch (\Symfony\Component\Console\Exception\RuntimeException $exception) {
    // Running the app after suppressing container resolution exceptions allows symfony/console to report usage information
} catch (RuntimeException | InvalidArgumentException $exception) {
    // Usage information provided by the `ContainerResolver` should be passed to the CLI output
    $containerNotFoundMessage = sprintf('<error>%s</error>', $exception->getMessage());
} finally {
    $input = new ArgvInput();
}

// By running the app even if its not provisioned allows symfony/console to report problems and/or display available options (like `--container`
$exitCode = $app->run($input, $output);

if ($containerNotFoundMessage) {
    $output->writeln($containerNotFoundMessage);
    $exitCode = 255;
}

exit($exitCode);
