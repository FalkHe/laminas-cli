#!/usr/bin/env php
<?php

/**
 * @see       https://github.com/laminas/laminas-cli for the canonical source repository
 * @copyright https://github.com/laminas/laminas-cli/blob/master/COPYRIGHT.md
 * @license   https://github.com/laminas/laminas-cli/blob/master/LICENSE.md New BSD License
 */

declare(strict_types=1);

use Laminas\Cli\ContainerCommandLoader;
use Laminas\Cli\ContainerResolver;
use Laminas\Cli\InputMapper\ArrayInputMapper;
use Laminas\Cli\LazyLoadingCommand;
use PackageVersions\Versions;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleTerminateEvent;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\EventDispatcher\EventDispatcher;

if (file_exists($a = __DIR__ . '/../../../autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../vendor/autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../autoload.php')) {
    require $a;
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}

// Set the main application directory as the current working directory
chdir(dirname($a) . '/../');

$container = ContainerResolver::resolve();
$config = $container->get('config')['laminas-cli'] ?? [];

$version = strstr(Versions::getVersion('laminas/laminas-cli'), '@', true);

$eventDispatcher = new EventDispatcher();
$eventDispatcher->addListener(
    ConsoleEvents::TERMINATE,
    static function (ConsoleTerminateEvent $event) use ($config) {
        if ($event->getExitCode() !== 0 || ! $event->getInput()->isInteractive()) {
            return;
        }

        $command = $event->getCommand();
        $class = $command instanceof LazyLoadingCommand
            ? $command->getCommandClass()
            : get_class($command);

        if (! isset($config['chains'][$class])
            || ! is_array($config['chains'][$class])
        ) {
            return;
        }

        $application = $command->getApplication();
        $input = $event->getInput();
        $output = $event->getOutput();

        /** @var QuestionHelper $helper */
        $helper = $application->getHelperSet()->get('question');

        foreach ($config['chains'][$class] as $nextCommandClass => $inputMapper) {
            $nextCommandName = array_search($nextCommandClass, $config['commands'], true);
            $nextCommand = $application->find($nextCommandName);

            $question = new ChoiceQuestion(
                PHP_EOL . "<info>Executing {$nextCommandName}</info> ({$nextCommand->getDescription()})."
                . PHP_EOL . '<question>Do you want to continue?</question>',
                ['Y' => 'yes, continue', 's' => 'skip command', 'n' => 'no, break'],
                'Y'
            );

            switch (strtolower($helper->ask($input, $output, $question))) {
                case 'y':
                    break;
                case 's':
                    $output->writeln("Skipping {$nextCommandName}.");
                    continue 2;
                case 'n':
                    $output->writeln("Break on {$nextCommandName}.");
                    break 2;
            }

            $inputMapper = is_array($inputMapper)
                ? new ArrayInputMapper($inputMapper)
                : new $inputMapper();

            $params = $inputMapper($input);
            $params['command'] = $nextCommandName;

            $exitCode = $application->run(new ArrayInput($params), $output);

            if ($exitCode !== 0) {
                $event->setExitCode($exitCode);
                return;
            }
        }
    }
);

$application = new Application('laminas', $version);
$application->setCommandLoader(new ContainerCommandLoader($container, $config['commands'] ?? []));
$application->setDispatcher($eventDispatcher);
$application->run();
